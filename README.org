
* What is problemize?

Problemize is a way of packaging html/js exercises with a nice interface

* How it will work

** Page generation

When parsing the markup of a notebook each file will be transformed using a template to create the pages, also adding interactivity such as navigation in between pages, the main page exercise list and the interface for the runnable code

#+begin_example
 Project root                  
 ├── index.(md|org)            
 ├── ex 1                      
 │   ├── ex1.(md|org)          
 │   ├── index.html            
 │   └── script.js             
 └── ex 2                      
     └── ex2.org               
#+end_example

In the project root we will have an index.(md|org) file which will contain the main page text. In each exercise folder we will have a markup file containing some exercise explanation, and the page and scripts that make the exercise. With org you will also be able to only have an org file with the code inside.

The markup files will be processed through a template page which will output the main page and each exercise page.

*** Main page

The main page will contain some text to explain the notebook (project) and a list of exercises to open.

*** Exercise page

The page will consist of the rendered markup document, and the provided code which will be displayed along with a region where it will be run. When using org, we can also add runnable code snippets for testing each part of the code and the use of noweb syntax so that the exported files can be split into different code blocs inside the org document.

** Sandboxing

We can try [[https://github.com/JetBrains/websandbox][this libary]] to sandbox the code that will run.

** Code blocks

One of the big features we want to implement is a way to see the rendered output and the code of the exercises, like codepen. Some options for implementing this behavior are:

*** Astro's ~<Code />~ component

Astro has a builtin code display element with syntax highlighting, using [[https://shiki.style/][shiki]]. I don't think these components let you edit the code, so they aren't an option.

*** Custom astro component

We could build our own component in astro, using either [[https://codemirror.net/][CodeMirror]] or the [[https://microsoft.github.io/monaco-editor/][Monaco Editor]] but it seems like the only way to pass arguments to these such as the code to display can only be done through props, which involve including the code as a string in the javascript code, or loading it from somewhere else.

*** Web components

This might be the most viable option; Creating a custom web component would allow us to make a custom environment to group various code editors, the output frame and other elements we need. These components will still use CodeMirror o Monaco as an editor.

*** Svelte component with custom preprocessor

Using a custom preprocessor we would be able to define our own markup that would be translated to the valid code needed. This option is a lot more ergonomic than using plain astro components, but need svelte to be added to the project, which seems like too much if this is it's only use.
